Adaptation of the cpp_tooling_stats headers/modules benchmark to build2.

https://github.com/bfgroup/cpp_tooling_stats

Steps to reproduce:


0. Build GCC from the C++-modules branch:

   https://gcc.gnu.org/wiki/cxx-modules


1. Build build2 from stage:

   Get the install script from:      https://stage.build2.org/0/

   Get the install instruction from: https://build2.org/install.xhtml


2. Clone cpp_tooling_stats next to this project (known to work at 6b7a63a018).

   https://github.com/bfgroup/cpp_tooling_stats


3. Generate headers and modules source code (adjust DAG depth as required):

cd cpp_tooling_stats

modules/parallel_perf.py --dir=../cpp-tooling-stats-build2 \
--no-run --json-out=/dev/null --kind=headers,modules \
--def-ints --use-c-headers --dag-depth=36


4. Run the benchmark script:

   Note: the script requires GNU time(1) and bc(1) utilities (see below
         on how to run manually instead).

   The script takes two optional arguments: GCC compiler (default is g++-m)
   and jobs count (default is 8):

cd cpp-tooling-stats-build2
./benchmark /path/to/g++-m 8

   The final output should be along these lines:

headers/make:   7.47s
headers/build2: 8.03s
modules/build2: 2.02s


5. To run each test manually:

cd cpp-tooling-stats-build2

make -j 8 CXX=g++-m clean
time make -j 8 CXX=g++-m

b -j 8 config.cxx=g++-m clean: headers/
time b -j 8 config.cxx=g++-m headers/

b -j 8 config.cxx=g++-m clean: modules/
time b -j 8 config.cxx=g++-m modules/
